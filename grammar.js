function sepBy(pattern, separator) {
  return seq(pattern, repeat(seq(separator, pattern)))
}

module.exports = grammar({
  name: 'COBOL',
  word: $ => $.WORD,

  rules: {
    start: $ => repeat(
      choice(
        $.program_definition,
        //optional($.function_definition) //todo
      )
    ),

    program_definition: $ => seq(
      $.identification_division,
      optional($.environment_division), //todo
      optional($.data_division), //todo
      $.procedure_division, //todo
      optional($.nested_prog), //todo
      optional($.end_program) //todo
    ),

    identification_division: $ => seq(
      $._IDENTIFICATION, $._DIVISION, '.',
      $._PROGRAM_ID, '.',
      $.program_name,
      optional($.as_literal),
      '.'
    ),

    program_name: $ => choice(
      $.WORD,
      $._LITERAL
    ),

    as_literal: $ => seq(
      $._AS,
      $._LITERAL
    ),

    function_definition: $ => /todo_function_definition/,

    environment_division: $ => /todo_environment_division/,
    data_division: $ => seq(
      $._DATA, $._DIVISION, '.',
      optional($.file_section),
      optional($.working_storage_section),
      optional($.local_storage_section),
      optional($.linkage_section),
      optional($.report_section),
      optional($.screen_section),
    ),

    file_section: $ => /todo_file_section/,
    working_storage_section: $ => seq(
      $._WORKING_STORAGE, $._SECTION, '.',
      repeat(seq($.data_description, '.'))
    ),

    data_description: $ => choice(
      $.constant_entry,
      seq(
        $.level_number, $.entry_name,
        repeat($._data_description_clause), optional($._LITERAL)
      ),
      seq(
        $.level_number_88, $.entry_name
      ),
    ),

    level_number: $ => /[0-9][0-9]/,
    level_number_88: $ => /88/,

    entry_name: $ => choice(
      $._FILLER,
      $.WORD
    ),

    constant_entry: $ => /todo_constant_entry/,

    _data_description_clause: $ => choice(
      $.redefines_clause,
      $.external_clause,
      $.global_clause,
      $.picture_clause,
      $.usage_clause,
      $.sign_clause,
      $.occurs_clause,
      $.justified_clause,
      $.synchronized_clause,
      $.blank_clause,
      $.based_clause,
      $.value_clause,
      $.renames_clause,
      $.any_length_clause,
      $.error
    ),

    redefines_clause: $ => seq(
      $._REDEFINES, $._identifier
    ),

    _identifier: $ => choice(
      $._qualified_word,
      seq($._qualified_word, $._subref),
      seq($._qualified_word, $._refmod),
      seq($._qualified_word, $._subref, $._refmod),
    ),

    _qualified_word: $ => sepBy(
      $.WORD, $._in_of
    ),

    _in_of: $ => choice(
      $._IN,
      $._OF
    ),

    _subref: $ => seq(
      '(',
      $._exp_list,
      ')'
    ),

    _refmod: $ => seq(
      '(',
      $._exp,
      ':',
      ')'
    ),

    _exp_list: $ => sepBy(
      $._exp, $._e_sep
    ),

    _exp: $ => choice(
      $._arith_x,
      $._binary_exp,
      $._unary_exp,
      seq('(', $._exp, ')')
    ),

    _binary_exp: $ => choice(
      $.pow_exp,
      $.mul_exp,
      $.div_exp,
      $.add_exp,
      $.sub_exp,
    ),

    _unary_exp: $ => prec(4, choice(
      $.positive_exp,
      $.negative_exp
    )),

    positive_exp: $ => seq(
      '+',
      field('value', $._exp)
    ),

    negative_exp: $ => seq(
      '-',
      field('value', $._exp)
    ),

    add_exp: $ => prec.left(1, seq(
      field('left', $._exp),
      '+',
      field('right', $._exp)
    )),

    sub_exp: $ => prec.left(1, seq(
      field('left', $._exp),
      '-',
      field('right', $._exp)
    )),

    mul_exp: $ => prec.left(2, seq(
      field('left', $._exp),
      '*',
      field('right', $._exp)
    )),

    div_exp: $ => prec.left(2, seq(
      field('left', $._exp),
      '/',
      field('right', $._exp)
    )),

    pow_exp: $ => prec.left(3, seq(
      field('left', $._exp),
      '^',
      field('right', $._exp)
    )),

    //todo
    _arith_x: $ => choice(
      $._identifier,
      seq($.LENGTH_, optional($._OF), $._identifier),
      seq($.LENGTH_, optional($._OF), $._basic_literal),
      seq($.LENGTH_, optional($._OF), $.function_),
      $._basic_literal,
      $.function_,
      $.linage_counter,
    ),

    external_clause: $ => /todo_external_clause/,
    global_clause: $ => /todo_global_clause/,
    picture_clause: $ => seq(
      choice($._PICTURE, $._PIC),
      optional($._IS),
      $._picture_string
    ),

    //todo
    _picture_string: $ => choice(
      $.picture_x,
      $.picture_9,
    ),

    picture_x: $ => /([xX](\([0-9]+\))?)+/,

    picture_9: $ => choice(
      $._picture_9_z,
      $._picture_9_v,
    ),
    _picture_9_z: $ => /(9(\([0-9]+\))?)+([zZ](\([0-9]+\))?)+/,
    _picture_9_v: $ => /(9(\([0-9]+\))?)+([vV](9(\([0-9]+\))?)+)?/,

    usage_clause: $ => /todo_usage_clause/,
    sign_clause: $ => /todo_sign_clause/,
    occurs_clause: $ => /todo_occurs_clause/,
    justified_clause: $ => /todo_justified_clause/,
    synchronized_clause: $ => /todo_synchronized_clause/,
    blank_clause: $ => /todo_blank_clause/,
    based_clause: $ => /todo_based_clause/,
    value_clause: $ => /todo_value_clause/,
    renames_clause: $ => /todo_renames_clause/,
    any_length_clause: $ => /todo_any_length/,
    error: $ => /todo_error/,

    local_storage_section: $ => /local_storage_section/,
    linkage_section: $ => /linkage_section/,
    report_section: $ => /report_section/,
    screen_section: $ => /screen_section/,

    //todo
    procedure_division: $ => seq(
      $._PROCEDURE, $._DIVISION, '.',
      repeat(
        seq($._statement, '.')
      )
    ),

    nested_prog: $ => /todo_nested_prog/,
    end_program: $ => /todo_end_program/,

    //todo
    _statement: $ => choice(
      $.stop_run_statement,
      $.move_statement,
    ),

    //todo
    stop_run_statement: $ => seq(
      $._STOP, $._RUN
    ),

    move_statement: $ => seq(
      $._MOVE,
      $._move_body
    ),

    _move_body: $ => seq(
      optional($._CORRESPONDING),
      field('src', $._x),
      $._TO,
      field('dst', $._target_x_list)
    ),

    _x: $ => choice(
      seq($._LENGTH, optional($._OF), choice(
        $._identifier,
        $._basic_literal,
        $.function_)
      ),
      seq($._ADDRESS, optional($._OF), choice(
        seq(
          choice($._PROGRAM, $._ENTRY),
          choice($._identifier, $._LITERAL)),
        $._identifier,
      )),
      $._literal,
      $.function_,
      $.linage_counter,
      $._identifier,
    ),

    _target_x_list: $ => repeat1($._target_x),
    _target_x: $ => choice(
      $._identifier,
      seq($._ADDRESS, optional($._OF), $._identifier)
    ),

    _basic_literal: $ => sepBy(
      $._basic_value,
      '&'
    ),

    _basic_value: $ => choice(
      $._LITERAL,
      $.SPACE_,
      $.ZERO_,
      $.QUOTE_,
      $.HIGH_VALUE_,
      $.LOW_VALUE_,
      $.TOK_NULL_
    ),

    _literal: $ => choice(
      $._basic_literal,
      seq($.ALL_, $._basic_value)
    ),

    function_: $ => choice(
      seq($.CURRENT_DATE_FUNC_, optional($.func_refmod)),
      seq($.WHEN_COMPILED_FUNC_, optional($.func_refmod)),
      seq($.UPPER_CASE_FUNC_, '(', $._exp, ')', optional($.func_refmod)),
      seq($.LOWER_CASE_FUNC_, '(', $._exp, ')', optional($.func_refmod)),
      seq($.REVERSE_FUNC_, '(', $._exp, ')', optional($.func_refmod)),
      seq($.CONCATENATE_FUNC_, '(', $._exp_list, ')', optional($.func_refmod)),
      seq($.SUBSTITUTE_FUNC_, '(', $._exp_list, ')', optional($.func_refmod)),
      seq($.SUBSTITUTE_CASE_FUNC_, '(', $._exp_list, ')', optional($.func_refmod)),
      seq($.TRIM_FUNCTION_, '(', $._trim_args, ')', optional($.func_refmod)),
      seq($.NUMVALC_FUNC_, '(', $._numvalc_args, ')'),
      seq($.LOCALE_DT_FUNC_, '(', $._locale_dt_args, ')', optional($.func_refmod)),
      seq($.FUNCTION_NAME_, optional($._func_args)),
    ),

    func_refmod: $ => choice(
      seq('(', $._exp, ':', ')'),
      seq('(', $._exp, ':', $._exp, ')'),
    ),

    _trim_args: $ => seq(
      $._exp,
      optional(
        seq(
          $._e_sep,
          choice($._LEADING, $._TRAILING)
        )
      )
    ),

    _e_sep: $ => choice(
      $._COMMA_DELIM,
      $._SEMI_COLON
    ),

    _numvalc_args: $ => sepBy(
      $._exp, $._e_sep
    ),

    _locale_dt_args: $ => seq(
      $._exp,
      optional(
        seq($._e_sep, $._qualified_word)
      )
    ),

    linage_counter: $ => seq(
      $._LINAGE_COUNTER,
      optional(seq($._in_of, $.WORD))
    ),

    _func_args: $ => seq(
      '(', optional($._exp_list), ')'
    ),

    _LITERAL: $ => choice(
      $.number,
      $._string,
    ),

    //todo
    number: $ => /[+-]?[0-9]+(\.[0-9]+)?/,
    _string: $ => choice(
      $.x_string,
      $.n_string,
      $.h_string
    ),

    x_string: $ => choice(
      /'[^'\n]*'/,
      /"[^"\n]*"/,
    ),

    h_string: $ => choice(
      /H'[^'\n]*'/,
      /H"[^"\n]*"/,
    ),

    n_string: $ => choice(
      /N'[^'\n]*'/,
      /N"[^"\n]*"/,
      /NC'[^'\n]*'/,
      /NC"[^"\n]*"/,
      /ND'[^'\n]*'/,
      /ND"[^"\n]*"/,
      /NX'[^'\n]*'/,
      /NX"[^"\n]*"/,
    ),

    _ACCEPT: $ => /[aA][cC][cC][eE][pP][tT]/,
    _ACCESS: $ => /[aA][cC][cC][eE][sS][sS]/,
    _ADD: $ => /[aA][dD][dD]/,
    _ADDRESS: $ => /[aA][dD][dD][rR][eE][sS][sS]/,
    _ADVANCING: $ => /[aA][dD][vV][aA][nN][cC][iI][nN][gG]/,
    _AFTER: $ => /[aA][fF][tT][eE][rR]/,
    _ALL: $ => /[aA][lL][lL]/,
    _ALLOCATE: $ => /[aA][lL][lL][oO][cC][aA][tT][eE]/,
    _ALPHABET: $ => /[aA][lL][pP][hH][aA][bB][eE][tT]/,
    _ALPHABETIC: $ => /[aA][lL][pP][hH][aA][bB][eE][tT][iI][cC]/,
    _ALPHABETIC_LOWER: $ => /[aA][lL][pP][hH][aA][bB][eE][tT][iI][cC]-[lL][oO][wW][eE][rR]/,
    _ALPHABETIC_UPPER: $ => /[aA][lL][pP][hH][aA][bB][eE][tT][iI][cC]-[uU][pP][pP][eE][rR]/,
    _ALPHANUMERIC: $ => /[aA][lL][pP][hH][aA][nN][uU][mM][eE][rR][iI][cC]/,
    _ALPHANUMERIC_EDITED: $ => /[aA][lL][pP][hH][aA][nN][uU][mM][eE][rR][iI][cC]-[eE][dD][iI][tT][eE][dD]/,
    _ALSO: $ => /[aA][lL][sS][oO]/,
    _ALTER: $ => /[aA][lL][tT][eE][rR]/,
    _ALTERNATE: $ => /[aA][lL][tT][eE][rR][nN][aA][tT][eE]/,
    _AND: $ => /[aA][nN][dD]/,
    _ANY: $ => /[aA][nN][yY]/,
    _APPLY: $ => /[aA][pP][pP][lL][yY]/,
    _ARE: $ => /[aA][rR][eE]/,
    _AREA: $ => /[aA][rR][eE][aA]/,
    _ARGUMENT_NUMBER: $ => /[aA][rR][gG][uU][mM][eE][nN][tT]-[nN][uU][mM][bB][eE][rR]/,
    _ARGUMENT_VALUE: $ => /[aA][rR][gG][uU][mM][eE][nN][tT]-[vV][aA][lL][uU][eE]/,
    _AS: $ => /[aA][sS]/,
    _ASCENDING: $ => /[aA][sS][cC][eE][nN][dD][iI][nN][gG]/,
    _ASSIGN: $ => /[aA][sS][sS][iI][gG][nN]/,
    _AT: $ => /[aA][tT]/,
    _AUTO: $ => /[aA][uU][tT][oO]/,
    _AUTOMATIC: $ => /[aA][uU][tT][oO][mM][aA][tT][iI][cC]/,
    _BACKGROUND_COLOR: $ => /[bB][aA][cC][kK][gG][rR][oO][uU][nN][dD]-[cC][oO][lL][oO][rR]/,
    _BASED: $ => /[bB][aA][sS][eE][dD]/,
    _BEFORE: $ => /[bB][eE][fF][oO][rR][eE]/,
    _BELL: $ => /[bB][eE][lL][lL]/,
    _BINARY: $ => /[bB][iI][nN][aA][rR][yY]/,
    _BINARY_C_LONG: $ => /[bB][iI][nN][aA][rR][yY]-[cC]-[lL][oO][nN][gG]/,
    _BINARY_CHAR: $ => /[bB][iI][nN][aA][rR][yY]-[cC][hH][aA][rR]/,
    _BINARY_DOUBLE: $ => /[bB][iI][nN][aA][rR][yY]-[dD][oO][uU][bB][lL][eE]/,
    _BINARY_LONG: $ => /[bB][iI][nN][aA][rR][yY]-[lL][oO][nN][gG]/,
    _BINARY_SHORT: $ => /[bB][iI][nN][aA][rR][yY]-[sS][hH][oO][rR][tT]/,
    _BLANK: $ => /[bB][lL][aA][nN][kK]/,
    _BLANK_LINE: $ => /[bB][lL][aA][nN][kK]-[lL][iI][nN][eE]/,
    _BLANK_SCREEN: $ => /[bB][lL][aA][nN][kK]-[sS][cC][rR][eE][eE][nN]/,
    _BLINK: $ => /[bB][lL][iI][nN][kK]/,
    _BLOCK: $ => /[bB][lL][oO][cC][kK]/,
    _BOTTOM: $ => /[bB][oO][tT][tT][oO][mM]/,
    _BY: $ => /[bB][yY]/,
    _BYTE_LENGTH: $ => /[bB][yY][tT][eE]-[lL][eE][nN][gG][tT][hH]/,
    _CALL: $ => /[cC][aA][lL][lL]/,
    _CANCEL: $ => /[cC][aA][nN][cC][eE][lL]/,
    _CH: $ => /[cC][hH]/,
    _CHAINING: $ => /[cC][hH][aA][iI][nN][iI][nN][gG]/,
    _CHARACTER: $ => /[cC][hH][aA][rR][aA][cC][tT][eE][rR]/,
    _CHARACTERS: $ => /[cC][hH][aA][rR][aA][cC][tT][eE][rR][sS]/,
    _CLASS: $ => /[cC][lL][aA][sS][sS]/,
    _CLASS_NAME: $ => /[cC][lL][aA][sS][sS]-[nN][aA][mM][eE]/,
    _CLOSE: $ => /[cC][lL][oO][sS][eE]/,
    _CLOSE_NOFEED: $ => /[cC][lL][oO][sS][eE]-[nN][oO][fF][eE][eE][dD]/,
    _CODE: $ => /[cC][oO][dD][eE]/,
    _CODE_SET: $ => /[cC][oO][dD][eE]-[sS][eE][tT]/,
    _COLLATING: $ => /[cC][oO][lL][lL][aA][tT][iI][nN][gG]/,
    _COL: $ => /[cC][oO][lL]/,
    _COLS: $ => /[cC][oO][lL][sS]/,
    _COLUMN: $ => /[cC][oO][lL][uU][mM][nN]/,
    _COLUMNS: $ => /[cC][oO][lL][uU][mM][nN][sS]/,
    _COMMA: $ => /[cC][oO][mM][mM][aA]/,
    _COMMAND_LINE: $ => /[cC][oO][mM][mM][aA][nN][dD]-[lL][iI][nN][eE]/,
    _COMMA_DELIM: $ => /[cC][oO][mM][mM][aA]-[dD][eE][lL][iI][mM]/,
    _COMMIT: $ => /[cC][oO][mM][mM][iI][tT]/,
    _COMMITMENT_CONTROL: $ => /[cC][oO][mM][mM][iI][tT][mM][eE][nN][tT]-[cC][oO][nN][tT][rR][oO][lL]/,
    _COMMON: $ => /[cC][oO][mM][mM][oO][nN]/,
    _COMP: $ => /[cC][oO][mM][pP]/,
    _COMPUTE: $ => /[cC][oO][mM][pP][uU][tT][eE]/,
    _COMP_1: $ => /[cC][oO][mM][pP]-1/,
    _COMP_2: $ => /[cC][oO][mM][pP]-2/,
    _COMP_3: $ => /[cC][oO][mM][pP]-3/,
    _COMP_4: $ => /[cC][oO][mM][pP]-4/,
    _COMP_5: $ => /[cC][oO][mM][pP]-5/,
    _COMP_X: $ => /[cC][oO][mM][pP]-[xX]/,
    _CONCATENATE_FUNC: $ => /[cC][oO][nN][cC][aA][tT][eE][nN][aA][tT][eE]-[fF][uU][nN][cC]/,
    _CONFIGURATION: $ => /[cC][oO][nN][fF][iI][gG][uU][rR][aA][tT][iI][oO][nN]/,
    _CONSTANT: $ => /[cC][oO][nN][sS][tT][aA][nN][tT]/,
    _CONTAINS: $ => /[cC][oO][nN][tT][aA][iI][nN][sS]/,
    _CONTENT: $ => /[cC][oO][nN][tT][eE][nN][tT]/,
    _CONTINUE: $ => /[cC][oO][nN][tT][iI][nN][uU][eE]/,
    _CONTROL: $ => /[cC][oO][nN][tT][rR][oO][lL]/,
    _CONTROLS: $ => /[cC][oO][nN][tT][rR][oO][lL][sS]/,
    _CONTROL_FOOTING: $ => /[cC][oO][nN][tT][rR][oO][lL]-[fF][oO][oO][tT][iI][nN][gG]/,
    _CONTROL_HEADING: $ => /[cC][oO][nN][tT][rR][oO][lL]-[hH][eE][aA][dD][iI][nN][gG]/,
    _CONVERTING: $ => /[cC][oO][nN][vV][eE][rR][tT][iI][nN][gG]/,
    _CORE_INDEX: $ => /[cC][oO][rR][eE]-[iI][nN][dD][eE][xX]/,
    _CORRESPONDING: $ => /[cC][oO][rR][rR][eE][sS][pP][oO][nN][dD][iI][nN][gG]/,
    _COUNT: $ => /[cC][oO][uU][nN][tT]/,
    _CRT: $ => /[cC][rR][tT]/,
    _CURRENCY: $ => /[cC][uU][rR][rR][eE][nN][cC][yY]/,
    _CURRENT_DATE_FUNC: $ => /[cC][uU][rR][rR][eE][nN][tT]-[dD][aA][tT][eE]-[fF][uU][nN][cC]/,
    _CURSOR: $ => /[cC][uU][rR][sS][oO][rR]/,
    _CYCLE: $ => /[cC][yY][cC][lL][eE]/,
    _CYL_OVERFLOW: $ => /[cC][yY][lL]-[oO][vV][eE][rR][fF][lL][oO][wW]/,
    _DATA: $ => /[dD][aA][tT][aA]/,
    _DATE: $ => /[dD][aA][tT][eE]/,
    _DAY: $ => /[dD][aA][yY]/,
    _DAY_OF_WEEK: $ => /[dD][aA][yY]-[oO][fF]-[wW][eE][eE][kK]/,
    _DE: $ => /[dD][eE]/,
    _DEBUGGING: $ => /[dD][eE][bB][uU][gG][gG][iI][nN][gG]/,
    _DECIMAL_POINT: $ => /[dD][eE][cC][iI][mM][aA][lL]-[pP][oO][iI][nN][tT]/,
    _DECLARATIVES: $ => /[dD][eE][cC][lL][aA][rR][aA][tT][iI][vV][eE][sS]/,
    _DEFAULT: $ => /[dD][eE][fF][aA][uU][lL][tT]/,
    _DELETE: $ => /[dD][eE][lL][eE][tT][eE]/,
    _DELIMITED: $ => /[dD][eE][lL][iI][mM][iI][tT][eE][dD]/,
    _DELIMITER: $ => /[dD][eE][lL][iI][mM][iI][tT][eE][rR]/,
    _DEPENDING: $ => /[dD][eE][pP][eE][nN][dD][iI][nN][gG]/,
    _DESCENDING: $ => /[dD][eE][sS][cC][eE][nN][dD][iI][nN][gG]/,
    _DETAIL: $ => /[dD][eE][tT][aA][iI][lL]/,
    _DISK: $ => /[dD][iI][sS][kK]/,
    _DISPLAY: $ => /[dD][iI][sS][pP][lL][aA][yY]/,
    _DIVIDE: $ => /[dD][iI][vV][iI][dD][eE]/,
    _DIVISION: $ => /[dD][iI][vV][iI][sS][iI][oO][nN]/,
    _DOWN: $ => /[dD][oO][wW][nN]/,
    _DUPLICATES: $ => /[dD][uU][pP][lL][iI][cC][aA][tT][eE][sS]/,
    _DYNAMIC: $ => /[dD][yY][nN][aA][mM][iI][cC]/,
    _EBCDIC: $ => /[eE][bB][cC][dD][iI][cC]/,
    _ELSE: $ => /[eE][lL][sS][eE]/,
    _END: $ => /[eE][nN][dD]/,
    _END_ACCEPT: $ => /[eE][nN][dD]-[aA][cC][cC][eE][pP][tT]/,
    _END_ADD: $ => /[eE][nN][dD]-[aA][dD][dD]/,
    _END_CALL: $ => /[eE][nN][dD]-[cC][aA][lL][lL]/,
    _END_COMPUTE: $ => /[eE][nN][dD]-[cC][oO][mM][pP][uU][tT][eE]/,
    _END_DELETE: $ => /[eE][nN][dD]-[dD][eE][lL][eE][tT][eE]/,
    _END_DISPLAY: $ => /[eE][nN][dD]-[dD][iI][sS][pP][lL][aA][yY]/,
    _END_DIVIDE: $ => /[eE][nN][dD]-[dD][iI][vV][iI][dD][eE]/,
    _END_EVALUATE: $ => /[eE][nN][dD]-[eE][vV][aA][lL][uU][aA][tT][eE]/,
    _END_FUNCTION: $ => /[eE][nN][dD]-[fF][uU][nN][cC][tT][iI][oO][nN]/,
    _END_IF: $ => /[eE][nN][dD]-[iI][fF]/,
    _END_MULTIPLY: $ => /[eE][nN][dD]-[mM][uU][lL][tT][iI][pP][lL][yY]/,
    _END_PERFORM: $ => /[eE][nN][dD]-[pP][eE][rR][fF][oO][rR][mM]/,
    _END_PROGRAM: $ => /[eE][nN][dD]-[pP][rR][oO][gG][rR][aA][mM]/,
    _END_READ: $ => /[eE][nN][dD]-[rR][eE][aA][dD]/,
    _END_RETURN: $ => /[eE][nN][dD]-[rR][eE][tT][uU][rR][nN]/,
    _END_REWRITE: $ => /[eE][nN][dD]-[rR][eE][wW][rR][iI][tT][eE]/,
    _END_SEARCH: $ => /[eE][nN][dD]-[sS][eE][aA][rR][cC][hH]/,
    _END_START: $ => /[eE][nN][dD]-[sS][tT][aA][rR][tT]/,
    _END_STRING: $ => /[eE][nN][dD]-[sS][tT][rR][iI][nN][gG]/,
    _END_SUBTRACT: $ => /[eE][nN][dD]-[sS][uU][bB][tT][rR][aA][cC][tT]/,
    _END_UNSTRING: $ => /[eE][nN][dD]-[uU][nN][sS][tT][rR][iI][nN][gG]/,
    _END_WRITE: $ => /[eE][nN][dD]-[wW][rR][iI][tT][eE]/,
    _ENTRY: $ => /[eE][nN][tT][rR][yY]/,
    _ENVIRONMENT: $ => /[eE][nN][vV][iI][rR][oO][nN][mM][eE][nN][tT]/,
    _ENVIRONMENT_NAME: $ => /[eE][nN][vV][iI][rR][oO][nN][mM][eE][nN][tT]-[nN][aA][mM][eE]/,
    _ENVIRONMENT_VALUE: $ => /[eE][nN][vV][iI][rR][oO][nN][mM][eE][nN][tT]-[vV][aA][lL][uU][eE]/,
    _EOL: $ => /[eE][oO][lL]/,
    _EOP: $ => /[eE][oO][pP]/,
    _EOS: $ => /[eE][oO][sS]/,
    _EQUAL: $ => /[eE][qQ][uU][aA][lL]/,
    _EQUALS: $ => /[eE][qQ][uU][aA][lL][sS]/,
    _ERASE: $ => /[eE][rR][aA][sS][eE]/,
    _ERROR: $ => /[eE][rR][rR][oO][rR]/,
    _ESCAPE: $ => /[eE][sS][cC][aA][pP][eE]/,
    _EVALUATE: $ => /[eE][vV][aA][lL][uU][aA][tT][eE]/,
    _EVENT_STATUS: $ => /[eE][vV][eE][nN][tT]-[sS][tT][aA][tT][uU][sS]/,
    _EXCEPTION: $ => /[eE][xX][cC][eE][pP][tT][iI][oO][nN]/,
    _EXCLUSIVE: $ => /[eE][xX][cC][lL][uU][sS][iI][vV][eE]/,
    _EXIT: $ => /[eE][xX][iI][tT]/,
    _EXTEND: $ => /[eE][xX][tT][eE][nN][dD]/,
    _EXTERNAL: $ => /[eE][xX][tT][eE][rR][nN][aA][lL]/,
    _FD: $ => /[fF][dD]/,
    _FILE_CONTROL: $ => /[fF][iI][lL][eE]-[cC][oO][nN][tT][rR][oO][lL]/,
    _FILE_ID: $ => /[fF][iI][lL][eE]-[iI][dD]/,
    _FILLER: $ => /[fF][iI][lL][lL][eE][rR]/,
    _FINAL: $ => /[fF][iI][nN][aA][lL]/,
    _FIRST: $ => /[fF][iI][rR][sS][tT]/,
    _FOOTING: $ => /[fF][oO][oO][tT][iI][nN][gG]/,
    _FOR: $ => /[fF][oO][rR]/,
    _FOREGROUND_COLOR: $ => /[fF][oO][rR][eE][gG][rR][oO][uU][nN][dD]-[cC][oO][lL][oO][rR]/,
    _FOREVER: $ => /[fF][oO][rR][eE][vV][eE][rR]/,
    _FORMS_OVERLAY: $ => /[fF][oO][rR][mM][sS]-[oO][vV][eE][rR][lL][aA][yY]/,
    _FREE: $ => /[fF][rR][eE][eE]/,
    _FROM: $ => /[fF][rR][oO][mM]/,
    _FULL: $ => /[fF][uU][lL][lL]/,
    _FUNCTION: $ => /[fF][uU][nN][cC][tT][iI][oO][nN]/,
    _FUNCTION_ID: $ => /[fF][uU][nN][cC][tT][iI][oO][nN]-[iI][dD]/,
    _FUNCTION_NAME: $ => /[fF][uU][nN][cC][tT][iI][oO][nN]-[nN][aA][mM][eE]/,
    _GE: $ => /[gG][eE]/,
    _GENERATE: $ => /[gG][eE][nN][eE][rR][aA][tT][eE]/,
    _GIVING: $ => /[gG][iI][vV][iI][nN][gG]/,
    _GLOBAL: $ => /[gG][lL][oO][bB][aA][lL]/,
    _GO: $ => /[gG][oO]/,
    _GOBACK: $ => /[gG][oO][bB][aA][cC][kK]/,
    _GREATER: $ => /[gG][rR][eE][aA][tT][eE][rR]/,
    _GROUP: $ => /[gG][rR][oO][uU][pP]/,
    _HEADING: $ => /[hH][eE][aA][dD][iI][nN][gG]/,
    _HIGHLIGHT: $ => /[hH][iI][gG][hH][lL][iI][gG][hH][tT]/,
    _HIGH_VALUE: $ => choice(
      'high-value', 'high-Value', 'high-VALUE',
      'High-value', 'High-Value', 'High-VALUE',
      'HIGH-value', 'HIGH-Value', 'HIGH-VALUE'
    ),
    _IDENTIFICATION: $ => /[iI][dD][eE][nN][tT][iI][fF][iI][cC][aA][tT][iI][oO][nN]/,
    _IF: $ => /[iI][fF]/,
    _IGNORE: $ => /[iI][gG][nN][oO][rR][eE]/,
    _IGNORING: $ => /[iI][gG][nN][oO][rR][iI][nN][gG]/,
    _IN: $ => /[iI][nN]/,
    _INDEX: $ => /[iI][nN][dD][eE][xX]/,
    _INDEXED: $ => /[iI][nN][dD][eE][xX][eE][dD]/,
    _INDICATE: $ => /[iI][nN][dD][iI][cC][aA][tT][eE]/,
    _INITIALIZE: $ => /[iI][nN][iI][tT][iI][aA][lL][iI][zZ][eE]/,
    _INITIALIZED: $ => /[iI][nN][iI][tT][iI][aA][lL][iI][zZ][eE][dD]/,
    _INITIATE: $ => /[iI][nN][iI][tT][iI][aA][tT][eE]/,
    _INPUT: $ => /[iI][nN][pP][uU][tT]/,
    _INPUT_OUTPUT: $ => /[iI][nN][pP][uU][tT]-[oO][uU][tT][pP][uU][tT]/,
    _INSPECT: $ => /[iI][nN][sS][pP][eE][cC][tT]/,
    _INTO: $ => /[iI][nN][tT][oO]/,
    _INTRINSIC: $ => /[iI][nN][tT][rR][iI][nN][sS][iI][cC]/,
    _INVALID: $ => /[iI][nN][vV][aA][lL][iI][dD]/,
    _INVALID_KEY: $ => /[iI][nN][vV][aA][lL][iI][dD]-[kK][eE][yY]/,
    _IS: $ => /[iI][sS]/,
    _I_O: $ => /[iI]-[oO]/,
    _I_O_CONTROL: $ => /[iI]-[oO]-[cC][oO][nN][tT][rR][oO][lL]/,
    _JUSTIFIED: $ => /[jJ][uU][sS][tT][iI][fF][iI][eE][dD]/,
    _KEY: $ => /[kK][eE][yY]/,
    _LABEL: $ => /[lL][aA][bB][eE][lL]/,
    _LAST: $ => /[lL][aA][sS][tT]/,
    _LAST_DETAIL: $ => /[lL][aA][sS][tT]-[dD][eE][tT][aA][iI][lL]/,
    _LE: $ => /[lL][eE]/,
    _LEADING: $ => /[lL][eE][aA][dD][iI][nN][gG]/,
    _LEFT: $ => /[lL][eE][fF][tT]/,
    _LENGTH: $ => /[lL][eE][nN][gG][tT][hH]/,
    _LESS: $ => /[lL][eE][sS][sS]/,
    _LEVEL_NUMBER_WORD: $ => /[lL][eE][vV][eE][lL]-[nN][uU][mM][bB][eE][rR]-[wW][oO][rR][dD]/,
    _LEVEL88_NUMBER_WORD: $ => /[lL][eE][vV][eE][lL]88-[nN][uU][mM][bB][eE][rR]-[wW][oO][rR][dD]/,
    _LIMIT: $ => /[lL][iI][mM][iI][tT]/,
    _LIMITS: $ => /[lL][iI][mM][iI][tT][sS]/,
    _LINAGE: $ => /[lL][iI][nN][aA][gG][eE]/,
    _LINAGE_COUNTER: $ => /[lL][iI][nN][aA][gG][eE]-[cC][oO][uU][nN][tT][eE][rR]/,
    _LINE: $ => /[lL][iI][nN][eE]/,
    _LINES: $ => /[lL][iI][nN][eE][sS]/,
    _LINKAGE: $ => /[lL][iI][nN][kK][aA][gG][eE]/,
    _LOCALE: $ => /[lL][oO][cC][aA][lL][eE]/,
    _LOCALE_DT_FUNC: $ => /[lL][oO][cC][aA][lL][eE]-[dD][tT]-[fF][uU][nN][cC]/,
    _LOCAL_STORAGE: $ => /[lL][oO][cC][aA][lL]-[sS][tT][oO][rR][aA][gG][eE]/,
    _LOCK: $ => /[lL][oO][cC][kK]/,
    _LOWER_CASE_FUNC: $ => /[lL][oO][wW][eE][rR]-[cC][aA][sS][eE]-[fF][uU][nN][cC]/,
    _LOWLIGHT: $ => /[lL][oO][wW][lL][iI][gG][hH][tT]/,
    _LOW_VALUE: $ => choice(
      'low-value', 'low-Value', 'low-VALUE',
      'Low-value', 'Low-Value', 'Low-VALUE',
      'LOW-value', 'LOW-Value', 'LOW-VALUE'
    ),
    _MANUAL: $ => /[mM][aA][nN][uU][aA][lL]/,
    _MEMORY: $ => /[mM][eE][mM][oO][rR][yY]/,
    _MERGE: $ => /[mM][eE][rR][gG][eE]/,
    _MINUS: $ => /[mM][iI][nN][uU][sS]/,
    _MNEMONIC_NAME: $ => /[mM][nN][eE][mM][oO][nN][iI][cC]-[nN][aA][mM][eE]/,
    _MODE: $ => /[mM][oO][dD][eE]/,
    _MOVE: $ => /[mM][oO][vV][eE]/,
    _MULTIPLE: $ => /[mM][uU][lL][tT][iI][pP][lL][eE]/,
    _MULTIPLY: $ => /[mM][uU][lL][tT][iI][pP][lL][yY]/,
    _NATIONAL: $ => /[nN][aA][tT][iI][oO][nN][aA][lL]/,
    _NATIONAL_EDITED: $ => /[nN][aA][tT][iI][oO][nN][aA][lL]-[eE][dD][iI][tT][eE][dD]/,
    _NATIVE: $ => /[nN][aA][tT][iI][vV][eE]/,
    _NE: $ => /[nN][eE]/,
    _NEGATIVE: $ => /[nN][eE][gG][aA][tT][iI][vV][eE]/,
    _NEXT: $ => /[nN][eE][xX][tT]/,
    _NEXT_SENTENCE: $ => /[nN][eE][xX][tT]-[sS][eE][nN][tT][eE][nN][cC][eE]/,
    _NO: $ => /[nN][oO]/,
    _NOMINAL: $ => /[nN][oO][mM][iI][nN][aA][lL]/,
    _NOT: $ => /[nN][oO][tT]/,
    _NOT_END: $ => /[nN][oO][tT]-[eE][nN][dD]/,
    _NOT_EOP: $ => /[nN][oO][tT]-[eE][oO][pP]/,
    _NOT_EXCEPTION: $ => /[nN][oO][tT]-[eE][xX][cC][eE][pP][tT][iI][oO][nN]/,
    _NOT_INVALID_KEY: $ => /[nN][oO][tT]-[iI][nN][vV][aA][lL][iI][dD]-[kK][eE][yY]/,
    _NOT_OVERFLOW: $ => /[nN][oO][tT]-[oO][vV][eE][rR][fF][lL][oO][wW]/,
    _NOT_SIZE_ERROR: $ => /[nN][oO][tT]-[sS][iI][zZ][eE]-[eE][rR][rR][oO][rR]/,
    _NO_ADVANCING: $ => /[nN][oO]-[aA][dD][vV][aA][nN][cC][iI][nN][gG]/,
    _NUMBER: $ => /[nN][uU][mM][bB][eE][rR]/,
    _NUMBERS: $ => /[nN][uU][mM][bB][eE][rR][sS]/,
    _NUMERIC: $ => /[nN][uU][mM][eE][rR][iI][cC]/,
    _NUMERIC_EDITED: $ => /[nN][uU][mM][eE][rR][iI][cC]-[eE][dD][iI][tT][eE][dD]/,
    _NUMVALC_FUNC: $ => /[nN][uU][mM][vV][aA][lL][cC]-[fF][uU][nN][cC]/,
    _OBJECT_COMPUTER: $ => /[oO][bB][jJ][eE][cC][tT]-[cC][oO][mM][pP][uU][tT][eE][rR]/,
    _OCCURS: $ => /[oO][cC][cC][uU][rR][sS]/,
    _OF: $ => /[oO][fF]/,
    _OFF: $ => /[oO][fF][fF]/,
    _OMITTED: $ => /[oO][mM][iI][tT][tT][eE][dD]/,
    _ON: $ => /[oO][nN]/,
    _ONLY: $ => /[oO][nN][lL][yY]/,
    _OPEN: $ => /[oO][pP][eE][nN]/,
    _OPTIONAL: $ => /[oO][pP][tT][iI][oO][nN][aA][lL]/,
    _OR: $ => /[oO][rR]/,
    _ORDER: $ => /[oO][rR][dD][eE][rR]/,
    _ORGANIZATION: $ => /[oO][rR][gG][aA][nN][iI][zZ][aA][tT][iI][oO][nN]/,
    _OTHER: $ => /[oO][tT][hH][eE][rR]/,
    _OUTPUT: $ => /[oO][uU][tT][pP][uU][tT]/,
    _OVERFLOW: $ => /[oO][vV][eE][rR][fF][lL][oO][wW]/,
    _OVERLINE: $ => /[oO][vV][eE][rR][lL][iI][nN][eE]/,
    _PACKED_DECIMAL: $ => /[pP][aA][cC][kK][eE][dD]-[dD][eE][cC][iI][mM][aA][lL]/,
    _PADDING: $ => /[pP][aA][dD][dD][iI][nN][gG]/,
    _PAGE: $ => /[pP][aA][gG][eE]/,
    _PAGE_FOOTING: $ => /[pP][aA][gG][eE]-[fF][oO][oO][tT][iI][nN][gG]/,
    _PAGE_HEADING: $ => /[pP][aA][gG][eE]-[hH][eE][aA][dD][iI][nN][gG]/,
    _PARAGRAPH: $ => /[pP][aA][rR][aA][gG][rR][aA][pP][hH]/,
    _PERFORM: $ => /[pP][eE][rR][fF][oO][rR][mM]/,
    _PIC: $ => /[pP][iI][cC]/,
    _PICTURE: $ => /[pP][iI][cC][tT][uU][rR][eE]/,
    _PLUS: $ => /[pP][lL][uU][sS]/,
    _POINTER: $ => /[pP][oO][iI][nN][tT][eE][rR]/,
    _POSITION: $ => /[pP][oO][sS][iI][tT][iI][oO][nN]/,
    _POSITIVE: $ => /[pP][oO][sS][iI][tT][iI][vV][eE]/,
    _PRESENT: $ => /[pP][rR][eE][sS][eE][nN][tT]/,
    _PREVIOUS: $ => /[pP][rR][eE][vV][iI][oO][uU][sS]/,
    _PRINTER: $ => /[pP][rR][iI][nN][tT][eE][rR]/,
    _PRINTING: $ => /[pP][rR][iI][nN][tT][iI][nN][gG]/,
    _PROCEDURE: $ => /[pP][rR][oO][cC][eE][dD][uU][rR][eE]/,
    _PROCEDURES: $ => /[pP][rR][oO][cC][eE][dD][uU][rR][eE][sS]/,
    _PROCEED: $ => /[pP][rR][oO][cC][eE][eE][dD]/,
    _PROGRAM: $ => /[pP][rR][oO][gG][rR][aA][mM]/,
    _PROGRAM_ID: $ => /[pP][rR][oO][gG][rR][aA][mM]-[iI][dD]/,
    _PROGRAM_NAME: $ => /[pP][rR][oO][gG][rR][aA][mM]-[nN][aA][mM][eE]/,
    _PROGRAM_POINTER: $ => /[pP][rR][oO][gG][rR][aA][mM]-[pP][oO][iI][nN][tT][eE][rR]/,
    _PROMPT: $ => /[pP][rR][oO][mM][pP][tT]/,
    _QUOTE: $ => choice('quote', 'QUOTE', 'Quote'),
    _RANDOM: $ => /[rR][aA][nN][dD][oO][mM]/,
    _RD: $ => /[rR][dD]/,
    _READ: $ => /[rR][eE][aA][dD]/,
    _RECORD: $ => /[rR][eE][cC][oO][rR][dD]/,
    _RECORDING: $ => /[rR][eE][cC][oO][rR][dD][iI][nN][gG]/,
    _RECORDS: $ => /[rR][eE][cC][oO][rR][dD][sS]/,
    _RECURSIVE: $ => /[rR][eE][cC][uU][rR][sS][iI][vV][eE]/,
    _REDEFINES: $ => /[rR][eE][dD][eE][fF][iI][nN][eE][sS]/,
    _REEL: $ => /[rR][eE][eE][lL]/,
    _REFERENCE: $ => /[rR][eE][fF][eE][rR][eE][nN][cC][eE]/,
    _RELATIVE: $ => /[rR][eE][lL][aA][tT][iI][vV][eE]/,
    _RELEASE: $ => /[rR][eE][lL][eE][aA][sS][eE]/,
    _REMAINDER: $ => /[rR][eE][mM][aA][iI][nN][dD][eE][rR]/,
    _REMOVAL: $ => /[rR][eE][mM][oO][vV][aA][lL]/,
    _RENAMES: $ => /[rR][eE][nN][aA][mM][eE][sS]/,
    _REPLACING: $ => /[rR][eE][pP][lL][aA][cC][iI][nN][gG]/,
    _REPORT: $ => /[rR][eE][pP][oO][rR][tT]/,
    _REPORTING: $ => /[rR][eE][pP][oO][rR][tT][iI][nN][gG]/,
    _REPORTS: $ => /[rR][eE][pP][oO][rR][tT][sS]/,
    _REPORT_FOOTING: $ => /[rR][eE][pP][oO][rR][tT]-[fF][oO][oO][tT][iI][nN][gG]/,
    _REPORT_HEADING: $ => /[rR][eE][pP][oO][rR][tT]-[hH][eE][aA][dD][iI][nN][gG]/,
    _REPOSITORY: $ => /[rR][eE][pP][oO][sS][iI][tT][oO][rR][yY]/,
    _REQUIRED: $ => /[rR][eE][qQ][uU][iI][rR][eE][dD]/,
    _RESERVE: $ => /[rR][eE][sS][eE][rR][vV][eE]/,
    _RETURN: $ => /[rR][eE][tT][uU][rR][nN]/,
    _RETURNING: $ => /[rR][eE][tT][uU][rR][nN][iI][nN][gG]/,
    _REVERSE_FUNC: $ => /[rR][eE][vV][eE][rR][sS][eE]-[fF][uU][nN][cC]/,
    _REVERSE_VIDEO: $ => /[rR][eE][vV][eE][rR][sS][eE]-[vV][iI][dD][eE][oO]/,
    _REWIND: $ => /[rR][eE][wW][iI][nN][dD]/,
    _REWRITE: $ => /[rR][eE][wW][rR][iI][tT][eE]/,
    _RIGHT: $ => /[rR][iI][gG][hH][tT]/,
    _ROLLBACK: $ => /[rR][oO][lL][lL][bB][aA][cC][kK]/,
    _ROUNDED: $ => /[rR][oO][uU][nN][dD][eE][dD]/,
    _RUN: $ => /[rR][uU][nN]/,
    _SAME: $ => /[sS][aA][mM][eE]/,
    _SCREEN: $ => /[sS][cC][rR][eE][eE][nN]/,
    _SCREEN_CONTROL: $ => /[sS][cC][rR][eE][eE][nN]-[cC][oO][nN][tT][rR][oO][lL]/,
    _SCROLL: $ => /[sS][cC][rR][oO][lL][lL]/,
    _SD: $ => /[sS][dD]/,
    _SEARCH: $ => /[sS][eE][aA][rR][cC][hH]/,
    _SECTION: $ => /[sS][eE][cC][tT][iI][oO][nN]/,
    _SECURE: $ => /[sS][eE][cC][uU][rR][eE]/,
    _SEGMENT_LIMIT: $ => /[sS][eE][gG][mM][eE][nN][tT]-[lL][iI][mM][iI][tT]/,
    _SELECT: $ => /[sS][eE][lL][eE][cC][tT]/,
    _SEMI_COLON: $ => /[sS][eE][mM][iI]-[cC][oO][lL][oO][nN]/,
    _SENTENCE: $ => /[sS][eE][nN][tT][eE][nN][cC][eE]/,
    _SEPARATE: $ => /[sS][eE][pP][aA][rR][aA][tT][eE]/,
    _SEQUENCE: $ => /[sS][eE][qQ][uU][eE][nN][cC][eE]/,
    _SEQUENTIAL: $ => /[sS][eE][qQ][uU][eE][nN][tT][iI][aA][lL]/,
    _SET: $ => /[sS][eE][tT]/,
    _SHARING: $ => /[sS][hH][aA][rR][iI][nN][gG]/,
    _SIGN: $ => /[sS][iI][gG][nN]/,
    _SIGNED: $ => /[sS][iI][gG][nN][eE][dD]/,
    _SIGNED_INT: $ => /[sS][iI][gG][nN][eE][dD]-[iI][nN][tT]/,
    _SIGNED_LONG: $ => /[sS][iI][gG][nN][eE][dD]-[lL][oO][nN][gG]/,
    _SIGNED_SHORT: $ => /[sS][iI][gG][nN][eE][dD]-[sS][hH][oO][rR][tT]/,
    _SIZE: $ => /[sS][iI][zZ][eE]/,
    _SIZE_ERROR: $ => /[sS][iI][zZ][eE]-[eE][rR][rR][oO][rR]/,
    _SORT: $ => /[sS][oO][rR][tT]/,
    _SORT_MERGE: $ => /[sS][oO][rR][tT]-[mM][eE][rR][gG][eE]/,
    _SOURCE: $ => /[sS][oO][uU][rR][cC][eE]/,
    _SOURCE_COMPUTER: $ => /[sS][oO][uU][rR][cC][eE]-[cC][oO][mM][pP][uU][tT][eE][rR]/,
    _SPACE: $ => choice('space', 'SPACE', 'Space'),
    _SPECIAL_NAMES: $ => /[sS][pP][eE][cC][iI][aA][lL]-[nN][aA][mM][eE][sS]/,
    _STANDARD: $ => /[sS][tT][aA][nN][dD][aA][rR][dD]/,
    _STANDARD_1: $ => /[sS][tT][aA][nN][dD][aA][rR][dD]-1/,
    _STANDARD_2: $ => /[sS][tT][aA][nN][dD][aA][rR][dD]-2/,
    _START: $ => /[sS][tT][aA][rR][tT]/,
    _STATUS: $ => /[sS][tT][aA][tT][uU][sS]/,
    _STOP: $ => /[sS][tT][oO][pP]/,
    _STRING: $ => /[sS][tT][rR][iI][nN][gG]/,
    _SUBSTITUTE_FUNC: $ => /[sS][uU][bB][sS][tT][iI][tT][uU][tT][eE]-[fF][uU][nN][cC]/,
    _SUBSTITUTE_CASE_FUNC: $ => /[sS][uU][bB][sS][tT][iI][tT][uU][tT][eE]-[cC][aA][sS][eE]-[fF][uU][nN][cC]/,
    _SUBTRACT: $ => /[sS][uU][bB][tT][rR][aA][cC][tT]/,
    _SUM: $ => /[sS][uU][mM]/,
    _SUPPRESS: $ => /[sS][uU][pP][pP][rR][eE][sS][sS]/,
    _SYMBOLIC: $ => /[sS][yY][mM][bB][oO][lL][iI][cC]/,
    _SYNCHRONIZED: $ => /[sS][yY][nN][cC][hH][rR][oO][nN][iI][zZ][eE][dD]/,
    _TALLYING: $ => /[tT][aA][lL][lL][yY][iI][nN][gG]/,
    _TAPE: $ => /[tT][aA][pP][eE]/,
    _TERMINATE: $ => /[tT][eE][rR][mM][iI][nN][aA][tT][eE]/,
    _TEST: $ => /[tT][eE][sS][tT]/,
    _THAN: $ => /[tT][hH][aA][nN]/,
    _THEN: $ => /[tT][hH][eE][nN]/,
    _THRU: $ => /[tT][hH][rR][uU]/,
    _TIME: $ => /[tT][iI][mM][eE]/,
    _TIMES: $ => /[tT][iI][mM][eE][sS]/,
    _TO: $ => /[tT][oO]/,
    _TOK_FALSE: $ => /[fF][aA][lL][sS][eE]/,
    _TOK_FILE: $ => /[fF][iI][lL][eE]/,
    _TOK_INITIAL: $ => /[iI][nN][iI][tT][iI][aA][lL]/,
    _TOK_NULL: $ => choice('null', 'Null', 'NULL'),
    _TOK_TRUE: $ => /[tT][rR][uU][eE]/,
    _TOP: $ => /[tT][oO][pP]/,
    _TRACKS: $ => /[tT][rR][aA][cC][kK][sS]/,
    _TRAILING: $ => /[tT][rR][aA][iI][lL][iI][nN][gG]/,
    _TRANSFORM: $ => /[tT][rR][aA][nN][sS][fF][oO][rR][mM]/,
    _TRIM_FUNCTION: $ => /[tT][rR][iI][mM]-[fF][uU][nN][cC][tT][iI][oO][nN]/,
    _TYPE: $ => /[tT][yY][pP][eE]/,
    _UNDERLINE: $ => /[uU][nN][dD][eE][rR][lL][iI][nN][eE]/,
    _UNIT: $ => /[uU][nN][iI][tT]/,
    _UNLOCK: $ => /[uU][nN][lL][oO][cC][kK]/,
    _UNSIGNED: $ => /[uU][nN][sS][iI][gG][nN][eE][dD]/,
    _UNSIGNED_INT: $ => /[uU][nN][sS][iI][gG][nN][eE][dD]-[iI][nN][tT]/,
    _UNSIGNED_LONG: $ => /[uU][nN][sS][iI][gG][nN][eE][dD]-[lL][oO][nN][gG]/,
    _UNSIGNED_SHORT: $ => /[uU][nN][sS][iI][gG][nN][eE][dD]-[sS][hH][oO][rR][tT]/,
    _UNSTRING: $ => /[uU][nN][sS][tT][rR][iI][nN][gG]/,
    _UNTIL: $ => /[uU][nN][tT][iI][lL]/,
    _UP: $ => /[uU][pP]/,
    _UPDATE: $ => /[uU][pP][dD][aA][tT][eE]/,
    _UPON: $ => /[uU][pP][oO][nN]/,
    _UPON_ARGUMENT_NUMBER: $ => /[uU][pP][oO][nN]-[aA][rR][gG][uU][mM][eE][nN][tT]-[nN][uU][mM][bB][eE][rR]/,
    _UPON_COMMAND_LINE: $ => /[uU][pP][oO][nN]-[cC][oO][mM][mM][aA][nN][dD]-[lL][iI][nN][eE]/,
    _UPON_ENVIRONMENT_NAME: $ => /[uU][pP][oO][nN]-[eE][nN][vV][iI][rR][oO][nN][mM][eE][nN][tT]-[nN][aA][mM][eE]/,
    _UPON_ENVIRONMENT_VALUE: $ => /[uU][pP][oO][nN]-[eE][nN][vV][iI][rR][oO][nN][mM][eE][nN][tT]-[vV][aA][lL][uU][eE]/,
    _UPPER_CASE_FUNC: $ => /[uU][pP][pP][eE][rR]-[cC][aA][sS][eE]-[fF][uU][nN][cC]/,
    _USAGE: $ => /[uU][sS][aA][gG][eE]/,
    _USE: $ => /[uU][sS][eE]/,
    _USING: $ => /[uU][sS][iI][nN][gG]/,
    _VALUE: $ => /[vV][aA][lL][uU][eE]/,
    _VARYING: $ => /[vV][aA][rR][yY][iI][nN][gG]/,
    _WAIT: $ => /[wW][aA][iI][tT]/,
    _WHEN: $ => /[wW][hH][eE][nN]/,
    _WHEN_COMPILED_FUNC: $ => /[wW][hH][eE][nN]-[cC][oO][mM][pP][iI][lL][eE][dD]-[fF][uU][nN][cC]/,
    _WHEN_OTHER: $ => /[wW][hH][eE][nN]-[oO][tT][hH][eE][rR]/,
    _WITH: $ => /[wW][iI][tT][hH]/,
    WORD: $ => /[a-zA-z_][a-zA-Z0-9_\-]*/,
    _WORDS: $ => /[wW][oO][rR][dD][sS]/,
    _WORKING_STORAGE: $ => /[wW][oO][rR][kK][iI][nN][gG]-[sS][tT][oO][rR][aA][gG][eE]/,
    _WRITE: $ => /[wW][rR][iI][tT][eE]/,
    _YYYYDDD: $ => /[yY][yY][yY][yY][dD][dD][dD]/,
    _YYYYMMDD: $ => /[yY][yY][yY][yY][mM][mM][dD][dD]/,
    _ZERO: $ => choice('zero', 'ZERO', 'Zero'),


    ACCEPT_: $ => $._ACCEPT,
    ACCESS_: $ => $._ACCESS,
    ADD_: $ => $._ADD,
    ADDRESS_: $ => $._ADDRESS,
    ADVANCING_: $ => $._ADVANCING,
    AFTER_: $ => $._AFTER,
    ALL_: $ => $._ALL,
    ALLOCATE_: $ => $._ALLOCATE,
    ALPHABET_: $ => $._ALPHABET,
    ALPHABETIC_: $ => $._ALPHABETIC,
    ALPHABETIC_LOWER_: $ => $._ALPHABETIC_LOWER,
    ALPHABETIC_UPPER_: $ => $._ALPHABETIC_UPPER,
    ALPHANUMERIC_: $ => $._ALPHANUMERIC,
    ALPHANUMERIC_EDITED_: $ => $._ALPHANUMERIC_EDITED,
    ALSO_: $ => $._ALSO,
    ALTER_: $ => $._ALTER,
    ALTERNATE_: $ => $._ALTERNATE,
    AND_: $ => $._AND,
    ANY_: $ => $._ANY,
    APPLY_: $ => $._APPLY,
    ARE_: $ => $._ARE,
    AREA_: $ => $._AREA,
    ARGUMENT_NUMBER_: $ => $._ARGUMENT_NUMBER,
    ARGUMENT_VALUE_: $ => $._ARGUMENT_VALUE,
    AS_: $ => $._AS,
    ASCENDING_: $ => $._ASCENDING,
    ASSIGN_: $ => $._ASSIGN,
    AT_: $ => $._AT,
    AUTO_: $ => $._AUTO,
    AUTOMATIC_: $ => $._AUTOMATIC,
    BACKGROUND_COLOR_: $ => $._BACKGROUND_COLOR,
    BASED_: $ => $._BASED,
    BEFORE_: $ => $._BEFORE,
    BELL_: $ => $._BELL,
    BINARY_: $ => $._BINARY,
    BINARY_C_LONG_: $ => $._BINARY_C_LONG,
    BINARY_CHAR_: $ => $._BINARY_CHAR,
    BINARY_DOUBLE_: $ => $._BINARY_DOUBLE,
    BINARY_LONG_: $ => $._BINARY_LONG,
    BINARY_SHORT_: $ => $._BINARY_SHORT,
    BLANK_: $ => $._BLANK,
    BLANK_LINE_: $ => $._BLANK_LINE,
    BLANK_SCREEN_: $ => $._BLANK_SCREEN,
    BLINK_: $ => $._BLINK,
    BLOCK_: $ => $._BLOCK,
    BOTTOM_: $ => $._BOTTOM,
    BY_: $ => $._BY,
    BYTE_LENGTH_: $ => $._BYTE_LENGTH,
    CALL_: $ => $._CALL,
    CANCEL_: $ => $._CANCEL,
    CH_: $ => $._CH,
    CHAINING_: $ => $._CHAINING,
    CHARACTER_: $ => $._CHARACTER,
    CHARACTERS_: $ => $._CHARACTERS,
    CLASS_: $ => $._CLASS,
    CLASS_NAME_: $ => $._CLASS_NAME,
    CLOSE_: $ => $._CLOSE,
    CLOSE_NOFEED_: $ => $._CLOSE_NOFEED,
    CODE_: $ => $._CODE,
    CODE_SET_: $ => $._CODE_SET,
    COLLATING_: $ => $._COLLATING,
    COL_: $ => $._COL,
    COLS_: $ => $._COLS,
    COLUMN_: $ => $._COLUMN,
    COLUMNS_: $ => $._COLUMNS,
    COMMA_: $ => $._COMMA,
    COMMAND_LINE_: $ => $._COMMAND_LINE,
    COMMA_DELIM_: $ => $._COMMA_DELIM,
    COMMIT_: $ => $._COMMIT,
    COMMITMENT_CONTROL_: $ => $._COMMITMENT_CONTROL,
    COMMON_: $ => $._COMMON,
    COMP_: $ => $._COMP,
    COMPUTE_: $ => $._COMPUTE,
    COMP_1_: $ => $._COMP_1,
    COMP_2_: $ => $._COMP_2,
    COMP_3_: $ => $._COMP_3,
    COMP_4_: $ => $._COMP_4,
    COMP_5_: $ => $._COMP_5,
    COMP_X_: $ => $._COMP_X,
    CONCATENATE_FUNC_: $ => $._CONCATENATE_FUNC,
    CONFIGURATION_: $ => $._CONFIGURATION,
    CONSTANT_: $ => $._CONSTANT,
    CONTAINS_: $ => $._CONTAINS,
    CONTENT_: $ => $._CONTENT,
    CONTINUE_: $ => $._CONTINUE,
    CONTROL_: $ => $._CONTROL,
    CONTROLS_: $ => $._CONTROLS,
    CONTROL_FOOTING_: $ => $._CONTROL_FOOTING,
    CONTROL_HEADING_: $ => $._CONTROL_HEADING,
    CONVERTING_: $ => $._CONVERTING,
    CORE_INDEX_: $ => $._CORE_INDEX,
    CORRESPONDING_: $ => $._CORRESPONDING,
    COUNT_: $ => $._COUNT,
    CRT_: $ => $._CRT,
    CURRENCY_: $ => $._CURRENCY,
    CURRENT_DATE_FUNC_: $ => $._CURRENT_DATE_FUNC,
    CURSOR_: $ => $._CURSOR,
    CYCLE_: $ => $._CYCLE,
    CYL_OVERFLOW_: $ => $._CYL_OVERFLOW,
    DATA_: $ => $._DATA,
    DATE_: $ => $._DATE,
    DAY_: $ => $._DAY,
    DAY_OF_WEEK_: $ => $._DAY_OF_WEEK,
    DE_: $ => $._DE,
    DEBUGGING_: $ => $._DEBUGGING,
    DECIMAL_POINT_: $ => $._DECIMAL_POINT,
    DECLARATIVES_: $ => $._DECLARATIVES,
    DEFAULT_: $ => $._DEFAULT,
    DELETE_: $ => $._DELETE,
    DELIMITED_: $ => $._DELIMITED,
    DELIMITER_: $ => $._DELIMITER,
    DEPENDING_: $ => $._DEPENDING,
    DESCENDING_: $ => $._DESCENDING,
    DETAIL_: $ => $._DETAIL,
    DISK_: $ => $._DISK,
    DISPLAY_: $ => $._DISPLAY,
    DIVIDE_: $ => $._DIVIDE,
    DIVISION_: $ => $._DIVISION,
    DOWN_: $ => $._DOWN,
    DUPLICATES_: $ => $._DUPLICATES,
    DYNAMIC_: $ => $._DYNAMIC,
    EBCDIC_: $ => $._EBCDIC,
    ELSE_: $ => $._ELSE,
    END_: $ => $._END,
    END_ACCEPT_: $ => $._END_ACCEPT,
    END_ADD_: $ => $._END_ADD,
    END_CALL_: $ => $._END_CALL,
    END_COMPUTE_: $ => $._END_COMPUTE,
    END_DELETE_: $ => $._END_DELETE,
    END_DISPLAY_: $ => $._END_DISPLAY,
    END_DIVIDE_: $ => $._END_DIVIDE,
    END_EVALUATE_: $ => $._END_EVALUATE,
    END_FUNCTION_: $ => $._END_FUNCTION,
    END_IF_: $ => $._END_IF,
    END_MULTIPLY_: $ => $._END_MULTIPLY,
    END_PERFORM_: $ => $._END_PERFORM,
    END_PROGRAM_: $ => $._END_PROGRAM,
    END_READ_: $ => $._END_READ,
    END_RETURN_: $ => $._END_RETURN,
    END_REWRITE_: $ => $._END_REWRITE,
    END_SEARCH_: $ => $._END_SEARCH,
    END_START_: $ => $._END_START,
    END_STRING_: $ => $._END_STRING,
    END_SUBTRACT_: $ => $._END_SUBTRACT,
    END_UNSTRING_: $ => $._END_UNSTRING,
    END_WRITE_: $ => $._END_WRITE,
    ENTRY_: $ => $._ENTRY,
    ENVIRONMENT_: $ => $._ENVIRONMENT,
    ENVIRONMENT_NAME_: $ => $._ENVIRONMENT_NAME,
    ENVIRONMENT_VALUE_: $ => $._ENVIRONMENT_VALUE,
    EOL_: $ => $._EOL,
    EOP_: $ => $._EOP,
    EOS_: $ => $._EOS,
    EQUAL_: $ => $._EQUAL,
    EQUALS_: $ => $._EQUALS,
    ERASE_: $ => $._ERASE,
    ERROR_: $ => $._ERROR,
    ESCAPE_: $ => $._ESCAPE,
    EVALUATE_: $ => $._EVALUATE,
    EVENT_STATUS_: $ => $._EVENT_STATUS,
    EXCEPTION_: $ => $._EXCEPTION,
    EXCLUSIVE_: $ => $._EXCLUSIVE,
    EXIT_: $ => $._EXIT,
    EXTEND_: $ => $._EXTEND,
    EXTERNAL_: $ => $._EXTERNAL,
    FD_: $ => $._FD,
    FILE_CONTROL_: $ => $._FILE_CONTROL,
    FILE_ID_: $ => $._FILE_ID,
    FILLER_: $ => $._FILLER,
    FINAL_: $ => $._FINAL,
    FIRST_: $ => $._FIRST,
    FOOTING_: $ => $._FOOTING,
    FOR_: $ => $._FOR,
    FOREGROUND_COLOR_: $ => $._FOREGROUND_COLOR,
    FOREVER_: $ => $._FOREVER,
    FORMS_OVERLAY_: $ => $._FORMS_OVERLAY,
    FREE_: $ => $._FREE,
    FROM_: $ => $._FROM,
    FULL_: $ => $._FULL,
    FUNCTION_: $ => $._FUNCTION,
    FUNCTION_ID_: $ => $._FUNCTION_ID,
    FUNCTION_NAME_: $ => $._FUNCTION_NAME,
    GE_: $ => $._GE,
    GENERATE_: $ => $._GENERATE,
    GIVING_: $ => $._GIVING,
    GLOBAL_: $ => $._GLOBAL,
    GO_: $ => $._GO,
    GOBACK_: $ => $._GOBACK,
    GREATER_: $ => $._GREATER,
    GROUP_: $ => $._GROUP,
    HEADING_: $ => $._HEADING,
    HIGHLIGHT_: $ => $._HIGHLIGHT,
    HIGH_VALUE_: $ => $._HIGH_VALUE,
    IDENTIFICATION_: $ => $._IDENTIFICATION,
    IF_: $ => $._IF,
    IGNORE_: $ => $._IGNORE,
    IGNORING_: $ => $._IGNORING,
    IN_: $ => $._IN,
    INDEX_: $ => $._INDEX,
    INDEXED_: $ => $._INDEXED,
    INDICATE_: $ => $._INDICATE,
    INITIALIZE_: $ => $._INITIALIZE,
    INITIALIZED_: $ => $._INITIALIZED,
    INITIATE_: $ => $._INITIATE,
    INPUT_: $ => $._INPUT,
    INPUT_OUTPUT_: $ => $._INPUT_OUTPUT,
    INSPECT_: $ => $._INSPECT,
    INTO_: $ => $._INTO,
    INTRINSIC_: $ => $._INTRINSIC,
    INVALID_: $ => $._INVALID,
    INVALID_KEY_: $ => $._INVALID_KEY,
    IS_: $ => $._IS,
    I_O_: $ => $._I_O,
    I_O_CONTROL_: $ => $._I_O_CONTROL,
    JUSTIFIED_: $ => $._JUSTIFIED,
    KEY_: $ => $._KEY,
    LABEL_: $ => $._LABEL,
    LAST_: $ => $._LAST,
    LAST_DETAIL_: $ => $._LAST_DETAIL,
    LE_: $ => $._LE,
    LEADING_: $ => $._LEADING,
    LEFT_: $ => $._LEFT,
    LENGTH_: $ => $._LENGTH,
    LESS_: $ => $._LESS,
    LEVEL_NUMBER_WORD_: $ => $._LEVEL_NUMBER_WORD,
    LEVEL88_NUMBER_WORD_: $ => $._LEVEL88_NUMBER_WORD,
    LIMIT_: $ => $._LIMIT,
    LIMITS_: $ => $._LIMITS,
    LINAGE_: $ => $._LINAGE,
    LINAGE_COUNTER_: $ => $._LINAGE_COUNTER,
    LINE_: $ => $._LINE,
    LINES_: $ => $._LINES,
    LINKAGE_: $ => $._LINKAGE,
    LITERAL_: $ => $._LITERAL,
    LOCALE_: $ => $._LOCALE,
    LOCALE_DT_FUNC_: $ => $._LOCALE_DT_FUNC,
    LOCAL_STORAGE_: $ => $._LOCAL_STORAGE,
    LOCK_: $ => $._LOCK,
    LOWER_CASE_FUNC_: $ => $._LOWER_CASE_FUNC,
    LOWLIGHT_: $ => $._LOWLIGHT,
    LOW_VALUE_: $ => $._LOW_VALUE,
    MANUAL_: $ => $._MANUAL,
    MEMORY_: $ => $._MEMORY,
    MERGE_: $ => $._MERGE,
    MINUS_: $ => $._MINUS,
    MNEMONIC_NAME_: $ => $._MNEMONIC_NAME,
    MODE_: $ => $._MODE,
    MOVE_: $ => $._MOVE,
    MULTIPLE_: $ => $._MULTIPLE,
    MULTIPLY_: $ => $._MULTIPLY,
    NATIONAL_: $ => $._NATIONAL,
    NATIONAL_EDITED_: $ => $._NATIONAL_EDITED,
    NATIVE_: $ => $._NATIVE,
    NE_: $ => $._NE,
    NEGATIVE_: $ => $._NEGATIVE,
    NEXT_: $ => $._NEXT,
    NEXT_SENTENCE_: $ => $._NEXT_SENTENCE,
    NO_: $ => $._NO,
    NOMINAL_: $ => $._NOMINAL,
    NOT_: $ => $._NOT,
    NOT_END_: $ => $._NOT_END,
    NOT_EOP_: $ => $._NOT_EOP,
    NOT_EXCEPTION_: $ => $._NOT_EXCEPTION,
    NOT_INVALID_KEY_: $ => $._NOT_INVALID_KEY,
    NOT_OVERFLOW_: $ => $._NOT_OVERFLOW,
    NOT_SIZE_ERROR_: $ => $._NOT_SIZE_ERROR,
    NO_ADVANCING_: $ => $._NO_ADVANCING,
    NUMBER_: $ => $._NUMBER,
    NUMBERS_: $ => $._NUMBERS,
    NUMERIC_: $ => $._NUMERIC,
    NUMERIC_EDITED_: $ => $._NUMERIC_EDITED,
    NUMVALC_FUNC_: $ => $._NUMVALC_FUNC,
    OBJECT_COMPUTER_: $ => $._OBJECT_COMPUTER,
    OCCURS_: $ => $._OCCURS,
    OF_: $ => $._OF,
    OFF_: $ => $._OFF,
    OMITTED_: $ => $._OMITTED,
    ON_: $ => $._ON,
    ONLY_: $ => $._ONLY,
    OPEN_: $ => $._OPEN,
    OPTIONAL_: $ => $._OPTIONAL,
    OR_: $ => $._OR,
    ORDER_: $ => $._ORDER,
    ORGANIZATION_: $ => $._ORGANIZATION,
    OTHER_: $ => $._OTHER,
    OUTPUT_: $ => $._OUTPUT,
    OVERFLOW_: $ => $._OVERFLOW,
    OVERLINE_: $ => $._OVERLINE,
    PACKED_DECIMAL_: $ => $._PACKED_DECIMAL,
    PADDING_: $ => $._PADDING,
    PAGE_: $ => $._PAGE,
    PAGE_FOOTING_: $ => $._PAGE_FOOTING,
    PAGE_HEADING_: $ => $._PAGE_HEADING,
    PARAGRAPH_: $ => $._PARAGRAPH,
    PERFORM_: $ => $._PERFORM,
    PIC_: $ => $._PIC,
    PICTURE_: $ => $._PICTURE,
    PLUS_: $ => $._PLUS,
    POINTER_: $ => $._POINTER,
    POSITION_: $ => $._POSITION,
    POSITIVE_: $ => $._POSITIVE,
    PRESENT_: $ => $._PRESENT,
    PREVIOUS_: $ => $._PREVIOUS,
    PRINTER_: $ => $._PRINTER,
    PRINTING_: $ => $._PRINTING,
    PROCEDURE_: $ => $._PROCEDURE,
    PROCEDURES_: $ => $._PROCEDURES,
    PROCEED_: $ => $._PROCEED,
    PROGRAM_: $ => $._PROGRAM,
    PROGRAM_ID_: $ => $._PROGRAM_ID,
    PROGRAM_NAME_: $ => $._PROGRAM_NAME,
    PROGRAM_POINTER_: $ => $._PROGRAM_POINTER,
    PROMPT_: $ => $._PROMPT,
    QUOTE_: $ => $._QUOTE,
    RANDOM_: $ => $._RANDOM,
    RD_: $ => $._RD,
    READ_: $ => $._READ,
    RECORD_: $ => $._RECORD,
    RECORDING_: $ => $._RECORDING,
    RECORDS_: $ => $._RECORDS,
    RECURSIVE_: $ => $._RECURSIVE,
    REDEFINES_: $ => $._REDEFINES,
    REEL_: $ => $._REEL,
    REFERENCE_: $ => $._REFERENCE,
    RELATIVE_: $ => $._RELATIVE,
    RELEASE_: $ => $._RELEASE,
    REMAINDER_: $ => $._REMAINDER,
    REMOVAL_: $ => $._REMOVAL,
    RENAMES_: $ => $._RENAMES,
    REPLACING_: $ => $._REPLACING,
    REPORT_: $ => $._REPORT,
    REPORTING_: $ => $._REPORTING,
    REPORTS_: $ => $._REPORTS,
    REPORT_FOOTING_: $ => $._REPORT_FOOTING,
    REPORT_HEADING_: $ => $._REPORT_HEADING,
    REPOSITORY_: $ => $._REPOSITORY,
    REQUIRED_: $ => $._REQUIRED,
    RESERVE_: $ => $._RESERVE,
    RETURN_: $ => $._RETURN,
    RETURNING_: $ => $._RETURNING,
    REVERSE_FUNC_: $ => $._REVERSE_FUNC,
    REVERSE_VIDEO_: $ => $._REVERSE_VIDEO,
    REWIND_: $ => $._REWIND,
    REWRITE_: $ => $._REWRITE,
    RIGHT_: $ => $._RIGHT,
    ROLLBACK_: $ => $._ROLLBACK,
    ROUNDED_: $ => $._ROUNDED,
    RUN_: $ => $._RUN,
    SAME_: $ => $._SAME,
    SCREEN_: $ => $._SCREEN,
    SCREEN_CONTROL_: $ => $._SCREEN_CONTROL,
    SCROLL_: $ => $._SCROLL,
    SD_: $ => $._SD,
    SEARCH_: $ => $._SEARCH,
    SECTION_: $ => $._SECTION,
    SECURE_: $ => $._SECURE,
    SEGMENT_LIMIT_: $ => $._SEGMENT_LIMIT,
    SELECT_: $ => $._SELECT,
    SEMI_COLON_: $ => $._SEMI_COLON,
    SENTENCE_: $ => $._SENTENCE,
    SEPARATE_: $ => $._SEPARATE,
    SEQUENCE_: $ => $._SEQUENCE,
    SEQUENTIAL_: $ => $._SEQUENTIAL,
    SET_: $ => $._SET,
    SHARING_: $ => $._SHARING,
    SIGN_: $ => $._SIGN,
    SIGNED_: $ => $._SIGNED,
    SIGNED_INT_: $ => $._SIGNED_INT,
    SIGNED_LONG_: $ => $._SIGNED_LONG,
    SIGNED_SHORT_: $ => $._SIGNED_SHORT,
    SIZE_: $ => $._SIZE,
    SIZE_ERROR_: $ => $._SIZE_ERROR,
    SORT_: $ => $._SORT,
    SORT_MERGE_: $ => $._SORT_MERGE,
    SOURCE_: $ => $._SOURCE,
    SOURCE_COMPUTER_: $ => $._SOURCE_COMPUTER,
    SPACE_: $ => $._SPACE,
    SPECIAL_NAMES_: $ => $._SPECIAL_NAMES,
    STANDARD_: $ => $._STANDARD,
    STANDARD_1_: $ => $._STANDARD_1,
    STANDARD_2_: $ => $._STANDARD_2,
    START_: $ => $._START,
    STATUS_: $ => $._STATUS,
    STOP_: $ => $._STOP,
    STRING_: $ => $._STRING,
    SUBSTITUTE_FUNC_: $ => $._SUBSTITUTE_FUNC,
    SUBSTITUTE_CASE_FUNC_: $ => $._SUBSTITUTE_CASE_FUNC,
    SUBTRACT_: $ => $._SUBTRACT,
    SUM_: $ => $._SUM,
    SUPPRESS_: $ => $._SUPPRESS,
    SYMBOLIC_: $ => $._SYMBOLIC,
    SYNCHRONIZED_: $ => $._SYNCHRONIZED,
    TALLYING_: $ => $._TALLYING,
    TAPE_: $ => $._TAPE,
    TERMINATE_: $ => $._TERMINATE,
    TEST_: $ => $._TEST,
    THAN_: $ => $._THAN,
    THEN_: $ => $._THEN,
    THRU_: $ => $._THRU,
    TIME_: $ => $._TIME,
    TIMES_: $ => $._TIMES,
    TO_: $ => $._TO,
    TOK_FALSE_: $ => $._TOK_FALSE,
    TOK_FILE_: $ => $._TOK_FILE,
    TOK_INITIAL_: $ => $._TOK_INITIAL,
    TOK_NULL_: $ => $._TOK_NULL,
    TOK_TRUE_: $ => $._TOK_TRUE,
    TOP_: $ => $._TOP,
    TRACKS_: $ => $._TRACKS,
    TRAILING_: $ => $._TRAILING,
    TRANSFORM_: $ => $._TRANSFORM,
    TRIM_FUNCTION_: $ => $._TRIM_FUNCTION,
    TYPE_: $ => $._TYPE,
    UNDERLINE_: $ => $._UNDERLINE,
    UNIT_: $ => $._UNIT,
    UNLOCK_: $ => $._UNLOCK,
    UNSIGNED_: $ => $._UNSIGNED,
    UNSIGNED_INT_: $ => $._UNSIGNED_INT,
    UNSIGNED_LONG_: $ => $._UNSIGNED_LONG,
    UNSIGNED_SHORT_: $ => $._UNSIGNED_SHORT,
    UNSTRING_: $ => $._UNSTRING,
    UNTIL_: $ => $._UNTIL,
    UP_: $ => $._UP,
    UPDATE_: $ => $._UPDATE,
    UPON_: $ => $._UPON,
    UPON_ARGUMENT_NUMBER_: $ => $._UPON_ARGUMENT_NUMBER,
    UPON_COMMAND_LINE_: $ => $._UPON_COMMAND_LINE,
    UPON_ENVIRONMENT_NAME_: $ => $._UPON_ENVIRONMENT_NAME,
    UPON_ENVIRONMENT_VALUE_: $ => $._UPON_ENVIRONMENT_VALUE,
    UPPER_CASE_FUNC_: $ => $._UPPER_CASE_FUNC,
    USAGE_: $ => $._USAGE,
    USE_: $ => $._USE,
    USING_: $ => $._USING,
    VALUE_: $ => $._VALUE,
    VARYING_: $ => $._VARYING,
    WAIT_: $ => $._WAIT,
    WHEN_: $ => $._WHEN,
    WHEN_COMPILED_FUNC_: $ => $._WHEN_COMPILED_FUNC,
    WHEN_OTHER_: $ => $._WHEN_OTHER,
    WITH_: $ => $._WITH,
    //WORD_: $ => $.WORD,
    WORDS_: $ => $._WORDS,
    WORKING_STORAGE_: $ => $._WORKING_STORAGE,
    WRITE_: $ => $._WRITE,
    YYYYDDD_: $ => $._YYYYDDD,
    YYYYMMDD_: $ => $._YYYYMMDD,
    ZERO_: $ => $._ZERO,

  }
});